type User {
  id: UUID!
  email: String!
  status: String!
  typeUser: String!
  codeCountryPhone: String!
  phone: String!
  validationMail: Boolean!
  validationPhone: Boolean!
  nameUser: String!
  Employee: Employee
  Responsible: Responsible
}

type UserResults {
  infoPage: InfoPage
  results: [User!]
}

type Query {
  getUsersAll(search: SearchUserInput): UserResults
  dataEmployeeByUserId(userId: UUID!): User!
}

type Mutation {
  me(token: String!, onTokenExpiration: String): AuthPayLoad!
  loginEmployee(input: LoginInput!): AuthPayLoad!
  loginResponsible(input: LoginInput!): AuthPayLoad!
  createUserResponsible(input: CreateUserResponsibleInput!): User!
  suspendUser(userId: UUID!): Boolean!
}

input CreateUserResponsibleInput {
  email: String!
  password: String!
  responsibleId: UUID!
}

input SearchUserInput {
  options: OptionsSearch
}

input LoginInput {
  email: String!
  password: String!
  systemConnect: SystemConnect!
}
